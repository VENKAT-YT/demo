hello MCA
echo "# demo" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/VENKAT-YT/demo.git
git push -u origin main
git remote add origin https://github.com/VENKAT-YT/demo.git
git branch -M main
git push -u origin main
https://github.com/VENKAT-YT/demo.git
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.unstage 'reset HEAD --'
This makes the following two commands equivalent:

$ git unstage fileA
$ git reset HEAD -- fileA
This seems a bit clearer. Itâ€™s also common to add a last command, like this:

$ git config --global alias.last 'log -1 HEAD'
This way, you can see the last commit easily:

$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    Test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
As you can tell, Git simply replaces the new command with whatever you alias it for. However, maybe you want to run an external command, rather than a Git subcommand. In that case, you start the command with a ! character. This is useful if you write your own tools that work with a Git repository. We can demonstrate by aliasing git visual to run gitk:

$ git config --global alias.visual '!gitk'